#version 460

layout (local_size_x = 256) in;

struct UniformBufferObject {
    mat4 modelMatrix;
    uint materialIndex;
    uint boundingBoxIndex;
};

layout (std140, set = 0, binding = 0) readonly buffer ObjectBuffer {
    UniformBufferObject objects[];
} objectBuffer;

struct DrawIndexedIndirect {
    uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;
};

layout (set = 0, binding = 1) buffer DrawIndexedIndirectBuffer {
    DrawIndexedIndirect drawIndexedIndirect[];
} drawIndexedIndirectBuffer;

struct BoundingBox {
    vec3 low;
    vec3 high;
};

layout (set = 1, binding = 0) readonly buffer ObjectBoundingBoxes {
    BoundingBox boundingBoxes[];
} objectBoundingBoxes;

layout (push_constant) uniform readonly constants {
	mat4 viewproj;
    uint drawCount;
} cameraData;

const vec4 planes[6] = vec4[](
    vec4(-1, 0, 0, 1),
    vec4(1, 0, 0, 1),
    vec4(0, -1, 0, 1),
    vec4(0, 1, 0, 1),
    vec4(0, 0, -1, 1),
    vec4(0, 0, 1, 0)
);

void generateAllBoundingBoxPoints(in BoundingBox box, inout vec3 points[8]) {
    points[0] = box.low;
    points[1] = vec3(box.high.x, box.low.yz);
    points[2] = vec3(box.low.x, box.high.y, box.low.z);
    points[3] = vec3(box.low.xy, box.high.z);
    points[4] = vec3(box.high.xy, box.low.z);
    points[5] = vec3(box.high.x, box.low.y, box.high.z);
    points[6] = vec3(box.low.x, box.high.yz);
    points[7] = box.high;
}

void main() {
    uint gID = gl_GlobalInvocationID.x;

    if (gID < cameraData.drawCount) {
        uint boundingBoxIndex = objectBuffer.objects[gID].boundingBoxIndex;
        BoundingBox boundingBox = objectBoundingBoxes.boundingBoxes[boundingBoxIndex];

        mat4 vpm = cameraData.viewproj * objectBuffer.objects[gID].modelMatrix;
        vec4 boundingBoxProjection[8];
        vec3 points[8];
        generateAllBoundingBoxPoints(boundingBox, points);
        for (uint i = 0; i < 8; i++) {
            boundingBoxProjection[i] = vpm * vec4(points[i], 1.0);
        }
        
        bool visible = true;
        for (uint i = 0; i < 6; i++) {
            bool one_point_inside = false;
            for (uint j = 0; j < 8; j++) {
                one_point_inside = one_point_inside || dot(boundingBoxProjection[j], planes[i]) >= 0;
            }
            visible = visible && one_point_inside;
        }
        atomicAdd(drawIndexedIndirectBuffer.drawIndexedIndirect[gID].instanceCount, visible ? 1 : 0);
        //atomicAdd(drawIndexedIndirectBuffer.drawIndexedIndirect[gID].instanceCount, 1);
    }



}
